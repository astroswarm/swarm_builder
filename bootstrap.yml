---
- hosts: all
  tasks:
    - apt:
        update_cache: true
      become: true

- hosts: all
  roles:
    - role: avinetworks.docker
      become: true

- hosts: all
  become: false
  roles:
    - role: xapplication_container
      vars:
        service_name: lin_guider
        gui_width: 645
        gui_height: 500
        build_packages:
          - build-essential
          - bzip2
          - fxload
          - libftdi-dev
          - libqt4-dev
          - libusb-1.0-0-dev
          - tar
          - wget
        build_steps:
          - wget http://downloads.sourceforge.net/project/linguider/4.1.0/lin_guider-4.1.0.tar.bz2
          - bunzip2 lin_guider-4.1.0.tar.bz2
          - tar xf lin_guider-4.1.0.tar
          - cd ./lin_guider_pack/lin_guider && ./configure
          - cd ./lin_guider_pack/lin_guider && make -j $(grep -c ^processor /proc/cpuinfo)
          - wget https://downloads.sourceforge.net/project/cccd/firmware/firmware-ccd_1.3_all.deb
          - dpkg -i firmware-ccd_1.3_all.deb
          - echo 'ATTRS{idVendor}=="1856", ATTRS{idProduct}=="0011", RUN+="/sbin/fxload -t fx2 -I /lib/firmware/ccd/qhy5.hex -D $env{DEVNAME} -s /lib/firmware/ccd/qhy5loader.hex"' > /etc/udev/rules.d/85-qhy-extended.rules
        stage_files:
          - /lin_guider_pack/lin_guider/lin_guider
        executable: lin_guider
        public_vnc_port: 5901
        public_websockify_port: 6101

    - role: xapplication_container
      vars:
        service_name: phd2
        gui_width: 860
        gui_height: 660
        build_packages:
          - build-essential
          - cmake
          - git
          - libindi-dev
          - libnova-dev
          - libwxgtk3.0-dev
          - pkg-config
          - wx-common
          - wx3.0-i18n
          - zlib1g-dev
        build_steps:
          - git clone --depth 1 https://github.com/OpenPHDGuiding/phd2.git /phd2
          - mkdir /phd2/tmp
          - cd /phd2/tmp && cmake ..
          - cd /phd2/tmp && make -j $(grep -c ^processor /proc/cpuinfo)
          - cd /phd2/tmp && make -j $(grep -c ^processor /proc/cpuinfo) install # Installs help file to /usr/local/share/phd2/PHD2GuideHelp.zip
          - apt-get install -y wget
          - wget https://downloads.sourceforge.net/project/cccd/firmware/firmware-ccd_1.3_all.deb
          - dpkg -i firmware-ccd_1.3_all.deb ; apt-get install -f -y
          - echo 'ATTRS{idVendor}=="1856", ATTRS{idProduct}=="0011", RUN+="/sbin/fxload -t fx2 -I /lib/firmware/ccd/qhy5.hex -D $env{DEVNAME} -s /lib/firmware/ccd/qhy5loader.hex"' > /etc/udev/rules.d/85-qhy-extended.rules
        stage_files:
          - /phd2/tmp/phd2
        executable: phd2
        public_vnc_port: 5902
        public_websockify_port: 6102

    - role: xapplication_container
      vars:
        service_name: openskyimager
        gui_width: 870
        gui_height: 550
        # build-essential seems to be needed on raspbian, but not jessie. Maybe make/g++ on jessie image?
        build_packages:
          - build-essential
          - cmake
          - fxload
          - git
          - libcfitsio3-dev
          - libglib2.0-0
          - libglib2.0-dev
          - libgtk2.0-0
          - libgtk2.0-dev
          - libgtk-3-0
          - libgtk-3-dev
          - libudev-dev
          - sudo
          - wget
        build_steps:
          - if [ $(lscpu | grep Architecture | sed s/Architecture:\\s\\+//) = "x86_64" ]; then wget http://download.cloudmakers.eu/atikccd-1.11-amd64.deb; dpkg -i atikccd-1.11-amd64.deb; apt-get -fy install; fi
          - if [ $(lscpu | grep Architecture | sed s/Architecture:\\s\\+//) = "armv7l" ]; then wget http://download.cloudmakers.eu/atikccd-1.11-armhf.deb; dpkg -i atikccd-1.11-armhf.deb; apt-get -fy install; fi
          - git clone --depth 1 https://github.com/freerobby/OpenSkyImager.git /OpenSkyImager
          - mkdir /OpenSkyImager/build
          - cd /OpenSkyImager/build && cmake -D FORCE_QHY_ONLY=false ..
          - cd /OpenSkyImager/build && make -j 1 # OSI's dependency chain cannot guarantee successful parallel builds, so only use one core.
        stage_files:
          - /OpenSkyImager/build/gtk/gtkImager
        executable: gtkImager
        public_vnc_port: 5903
        public_websockify_port: 6103

    - role: xapplication_container
      vars:
        service_name: stellarium
        gui_width: 1000
        gui_height: 600
        build_packages:
          - build-essential
          - cmake
          - g++
          - gcc
          - git
          - libgl1-mesa-dev
          - libgl1-mesa-dri
          - libqt5declarative5
          - libqt5multimedia5-plugins
          - libqt5opengl5-dev
          - libqt5serialport5-dev
          - libqt5svg5-dev
          - qtdeclarative5-dev
          - qtdeclarative5-dev-tools
          - qtmultimedia5-dev
          - qtquick1-5-dev
          - qtquick1-qml-plugins
          - qtscript5-dev
          - qttools5-dev-tools
          - qttools5-dev
          - wget
          - xcompmgr
        build_steps:
          - git clone --depth 1 https://github.com/Stellarium/stellarium.git /stellarium
          - cd /stellarium && mkdir -p builds/unix
          - cd /stellarium/builds/unix && cmake ../..
          - cd /stellarium/builds/unix && make -j $(grep -c ^processor /proc/cpuinfo)
        stage_files:
          - /stellarium/builds/unix/src/stellarium
        executable: stellarium
        public_vnc_port: 5904
        public_websockify_port: 6104

    - role: novnc_container

    - role: swarm_frontend_container

  tasks:
    - name: Start containers
      shell: docker start $(docker ps -aq)
      become: true
