{% if ansible_machine == "x86_64" -%}
  FROM debian:jessie
{% elif ansible_machine == "armv7l" -%}
  FROM resin/rpi-raspbian:jessie-20160831
{% else -%}
  # No docker base available for architecture: {{ansible_machine}}
{% endif %}

RUN apt-get -y update

# Install X dependencies
RUN apt-get -y install \
  python-pip \
  websockify \
  x11vnc \
  xvfb

# Install build dependencies for {{service_name}}
RUN apt-get -y install {{ build_packages|join(" ") }}

# Install runtime dependencies
RUN apt-get -y install {{ run_packages|join(" ") }}

# Build {{service_name}}
{% for build_step in build_steps -%}
  RUN {{build_step}}
{% endfor %}

# Stage {{service_name}}
RUN mkdir /stage
{% for stage_file in stage_files -%}
  RUN cp -rf {{stage_file}} /stage
{% endfor %}

# Create startup script to run full graphical environment followed by {{service_name}}
RUN echo "#!/usr/bin/env sh" > /start.sh
# Docker doesn't clean the file system on restart, so clean any old lock that may exist
RUN echo "/bin/rm -f /tmp/.X{{xdisplay}}-lock" >> /start.sh
RUN echo "/usr/bin/Xvfb :{{xdisplay}} -screen 0 {{gui_width}}x{{gui_height}}x16 &" >> /start.sh
RUN echo "/usr/bin/x11vnc -display :{{xdisplay}} -forever &" >> /start.sh
RUN echo "/usr/bin/websockify 6080 localhost:5900 &" >> /start.sh
RUN echo "DISPLAY=:{{xdisplay}} /stage/{{executable}}" >> /start.sh
RUN echo "" >> /start.sh
RUN chmod +x /start.sh

EXPOSE 5900
EXPOSE 6080

CMD ["/start.sh"]
